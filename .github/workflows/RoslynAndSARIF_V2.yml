name: "Roslyn analyzers â†’ SARIF (VS + MSBuild on self-hosted Windows)"

on:
  push:
    branches: ["master", "main"]
  pull_request:
    branches: ["master", "main"]
  workflow_dispatch:

jobs:
  roslyn-sarif:
    runs-on: [self-hosted, windows, x64]
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug host capabilities (optional, remove if noisy)
        shell: powershell
        run: |
          Write-Host "=== dotnet --info ==="
          dotnet --info 2>&1 | Out-String | Write-Host
          Write-Host "=== where msbuild ==="
          where msbuild 2>&1 | Out-String | Write-Host
          Write-Host "=== PATH snippet ==="
          $env:PATH.Split(';') | Select-Object -First 20 | ForEach-Object { Write-Host $_ }

      - name: Build (initialize VS environment and run MSBuild to produce SARIF)
        id: build
        shell: powershell
        run: |
          # create reports folder
          New-Item -ItemType Directory -Path "$env:GITHUB_WORKSPACE\reports" -Force | Out-Null

          # candidate paths for VsDevCmd.bat (adjust if you use other VS edition/location)
          $candidates = @(
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\Common7\Tools",
            "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat",
            "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\VsDevCmd.bat",
            "C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\Tools\VsDevCmd.bat",
            "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat",
            "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\Common7\Tools\VsDevCmd.bat"
          )

          $vs = $candidates | Where-Object { Test-Path $_ } | Select-Object -First 1

          if (-not $vs) {
            Write-Error "VsDevCmd.bat not found in common locations. Please install Visual Studio / Build Tools or update the list of paths."
            exit 1
          }

          Write-Host "Using VsDevCmd: $vs"

          $sln = Join-Path $env:GITHUB_WORKSPACE "TestA.sln"   # <<-- change TestA.sln if needed
          if (-not (Test-Path $sln)) {
            Write-Error "Solution file not found at $sln"
            exit 1
          }

          # Run VsDevCmd.bat and then msbuild in the same cmd session so env vars are active.
          # First restore, then rebuild with analyzers and emit SARIF via ErrorLog.
          & cmd /c "`"$vs`" && msbuild `"$sln`" /t:Restore /p:Configuration=Release" 
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Restore returned exit code $LASTEXITCODE (continuing to attempt build for diagnostics)."
          }

          & cmd /c "`"$vs`" && msbuild `"$sln`" /t:Rebuild /p:Configuration=Release /p:RunAnalyzers=true /p:ErrorLog=`"$env:GITHUB_WORKSPACE\reports\roslyn-report.sarif`""
          $msbuildExit = $LASTEXITCODE
          Write-Host "MSBuild exited with code $msbuildExit"
          # don't fail here so we can still upload artifact/inspect file. The job will reflect failure if non-zero.
          exit $msbuildExit
        continue-on-error: false

      - name: Check for SARIF file
        id: check
        shell: powershell
        run: |
          if (Test-Path "$env:GITHUB_WORKSPACE\reports\roslyn-report.sarif") {
            "sarif_exists=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            Write-Host "SARIF found."
          } else {
            "sarif_exists=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            Write-Host "SARIF not found."
          }

      - name: Upload SARIF to GitHub (Code scanning)
        if: steps.check.outputs.sarif_exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/roslyn-report.sarif
